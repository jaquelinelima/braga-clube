openapi: 3.0.3
x-stoplight:
  id: mj00i1cm0rm7o
info:
  title: Swagger BragaClube
  description: 'Especificação da API do BragaClube, uma aplicação para facilitar o agendamento e entrada dos sócios do clube nas áreas de lazer. '
  version: 1.0.0
tags:
  - name: Administradores
    description: Tudo sobre os admistradores
  - name: Áreas de lazer
    description: Tudo sobre as áreas de lazer
  - name: Reservas
    description: Tudo sobre as reservas das áreas de lazer
  - name: Sócios
    description: Tudo sobre os sócios
paths:
  /area-de-lazer:
    get:
      tags:
        - Áreas de lazer
      summary: Listar áreas de lazer
      description: Retorna uma lista de áreas de lazer
      operationId: getAreasDeLazer
      responses:
        '200':
          description: Lista de áreas de lazer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
                xml:
                  name: areas
                  wrapped: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Áreas de lazer
      summary: Atualiza uma área de lazer existente
      description: Atualiza uma área de lazer existente pelo id
      operationId: updateAreaDeLazer
      requestBody:
        description: Atualiza uma área de lazer existente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Area'
          application/xml:
            schema:
              $ref: '#/components/schemas/Area'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Area'
        required: true
      responses:
        '200':
          description: Atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
            application/xml:
              schema:
                $ref: '#/components/schemas/Area'
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Área não encontrada
        '405':
          description: Erro de validação
    post:
      tags:
        - Áreas de lazer
      summary: Adiciona uma nova área de lazer
      description: Adiciona uma nova área de lazer
      operationId: addAreaDeLazer
      requestBody:
        description: Adiciona uma nova área de lazer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Area'
          application/xml:
            schema:
              $ref: '#/components/schemas/Area'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Area'
        required: true
      responses:
        '200':
          description: Área de lazer criada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
            application/xml:
              schema:
                $ref: '#/components/schemas/Area'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '405':
          description: Input inválido
  '/area-de-lazer/{areaID}':
    get:
      tags:
        - Áreas de lazer
      summary: Procurar área de lazer pelo ID
      description: Retorna uma única área de lazer
      operationId: getAreaDeLazer
      parameters:
        - name: areaID
          in: path
          description: ID da área de lazer a ser retornada
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Área de lazer encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
              examples:
                example-1:
                  value:
                    id: 14
                    nome: Salão de festas
                    descricao: Salão de festas do BragaClube
            application/xml:
              schema:
                $ref: '#/components/schemas/Area'
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Área de lazer não encontrada
    delete:
      tags:
        - Áreas de lazer
      summary: Deleta uma área de lazer
      description: Deleta uma área de lazer
      operationId: deleteAreaDeLazer
      parameters:
        - name: areaID
          in: path
          description: ID da área de lazer a ser deletada
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Áreas de lazer deletada
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Área de lazer não encontrada
  '/area-de-lazer/{areaID}/reserva':
    get:
      tags:
        - Áreas de lazer
      summary: Retorna a lista de reservas de uma áreas de lazer
      description: Retorna a lista de reservas de uma áreas de lazer
      operationId: getReservasDaAreaDeLazer
      parameters:
        - name: areaID
          in: path
          description: ID da área de lazer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista de reservas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reserva'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reserva'
                xml:
                  name: areas
                  wrapped: true
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Área de lazer não encontrada
  /socio:
    get:
      tags:
        - Sócios
      summary: Retorna os sócios cadastrados
      description: Retorna os sócios cadastrados
      operationId: getSocios
      responses:
        '200':
          description: Lista de sócios cadastrados
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Socio'
                xml:
                  name: socios
                  wrapped: true
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Socio'
                xml:
                  name: socios
                  wrapped: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Sócios
      summary: Cadastra um novo sócio
      description: Cadastra um novo sócio
      operationId: addSocio
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Socio'
          application/xml:
            schema:
              $ref: '#/components/schemas/Socio'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Socio'
      responses:
        '200':
          description: sócio cadastrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Socio'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '405':
          description: Input inválido
    put:
      tags:
        - Sócios
      summary: Atualiza um sócio
      description: Atualiza um sócio
      operationId: updateSocio
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Socio'
          application/xml:
            schema:
              $ref: '#/components/schemas/Socio'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Socio'
      responses:
        '200':
          description: sócio atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Socio'
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Sócio não encontrado
        '405':
          description: Erro de validação
  '/socio/{socioId}':
    get:
      tags:
        - Sócios
      summary: Procurar sócio pelo ID
      description: Procurar sócio pelo ID.
      operationId: getSocio
      parameters:
        - name: socioId
          in: path
          description: ID do sócio cadastrado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Sócio encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Socio'
            application/xml:
              schema:
                $ref: '#/components/schemas/Socio'
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Sócio não encontrado
    delete:
      tags:
        - Sócios
      summary: Deletar um sócio por ID
      description: Deletar um sócio por ID
      operationId: deleteSocio
      parameters:
        - name: socioId
          in: path
          description: ID do sócio a ser deletado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Sócio deletado
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Sócio não encontrado
  /reserva:
    get:
      tags:
        - Reservas
      summary: Listar reservas
      description: Retorna uma lista de reservas
      operationId: getReservas
      responses:
        '200':
          description: Lista de reservas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reserva'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reserva'
                xml:
                  name: reservas
                  wrapped: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Reservas
      summary: Cria uma nova reserva
      description: Cria uma nova reserva
      operationId: addReserva
      requestBody:
        description: Cria uma nova reserva
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reserva'
          application/xml:
            schema:
              $ref: '#/components/schemas/Reserva'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reserva'
      responses:
        '200':
          description: reserva criada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reserva'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reserva'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Reservas
      summary: Atualiza uma reserva
      description: Atualiza uma reserva
      operationId: updateReserva
      requestBody:
        description: Atualiza uma reserva
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reserva'
          application/xml:
            schema:
              $ref: '#/components/schemas/Reserva'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reserva'
      responses:
        '200':
          description: reserva atualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reserva'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reserva'
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Reserva não encontrada
        '405':
          description: Erro de validação
  '/reserva/{reservaID}':
    get:
      tags:
        - Reservas
      summary: Busca uma reserva pelo ID
      description: Busca uma reserva pelo ID
      operationId: getReserva
      parameters:
        - name: reservaID
          in: path
          description: ID da reserva cadastrada
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Reserva encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reserva'
            application/xml:
              schema:
                $ref: '#/components/schemas/Reserva'
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Reserva não encontrada
        '405':
          description: Erro de validação
    delete:
      tags:
        - Reservas
      summary: Deleta uma reserva pelo ID
      description: Deleta uma reserva pelo ID
      operationId: deleteReserva
      parameters:
        - name: reservaID
          in: path
          description: ID da reserva cadastrada
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Reserva deletada
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Reserva não encontrada
        '405':
          description: Erro de validação
  '/socio/{socioId}/reserva':
    get:
      tags:
        - Reservas
        - Sócios
      summary: Retorna a lista de reservas de um sócio
      description: Retorna a lista de reservas de um sócio
      operationId: getReservasDoSocio
      parameters:
        - name: socioId
          in: path
          description: ID do sócio cadastrado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista de reservas do sócio
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reserva'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reserva'
                xml:
                  name: reservas
                  wrapped: true
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Sócio não encontrado
  /adminstrador:
    get:
      tags:
        - Administradores
      summary: Retorna a lista de administradores
      description: Retorna a lista de administradores
      operationId: getAdministradores
      responses:
        '200':
          description: Lista de administradores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Administrador'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Administrador'
                xml:
                  name: administradores
                  wrapped: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Administradores
      summary: Adiciona um novo administrador
      description: Adiciona um novo administrador
      operationId: addAdministrador
      requestBody:
        description: Adiciona um novo administrador
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Administrador'
          application/xml:
            schema:
              $ref: '#/components/schemas/Administrador'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Administrador'
      responses:
        '200':
          description: Adminstrador cadastrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Administrador'
            application/xml:
              schema:
                $ref: '#/components/schemas/Administrador'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '405':
          description: Input inválido
    put:
      tags:
        - Administradores
      summary: Atualiza um administrador
      description: Atualiza um administrador
      operationId: updateAdministrador
      requestBody:
        description: Atualiza um administrador
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Administrador'
          application/xml:
            schema:
              $ref: '#/components/schemas/Administrador'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Administrador'
      responses:
        '200':
          description: Adminstrador atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Administrador'
            application/xml:
              schema:
                $ref: '#/components/schemas/Administrador'
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Adminstrador não encontrado
        '405':
          description: Input inválido
  '/adminstrador/{adminstradorID}':
    get:
      tags:
        - Administradores
      summary: Busca o adminstrador pelo ID
      description: Busca o adminstrador pelo ID
      operationId: getAdministrador
      parameters:
        - name: adminstradorID
          in: path
          description: ID do adminstrador cadastrado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Adminstrador encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Administrador'
            application/xml:
              schema:
                $ref: '#/components/schemas/Administrador'
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Adminstrador não encontrado
    delete:
      tags:
        - Administradores
      summary: Deleta um adminstrador pelo ID
      description: Deleta um adminstrador pelo ID
      operationId: deleteAdministrador
      parameters:
        - name: adminstradorID
          in: path
          description: ID do adminstrador cadastrado
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Adminstrador deletado
        '400':
          description: ID inválido enviado
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Adminstrador não encontrado
components:
  responses:
    UnauthorizedError:
      description: Token de acesso faltando ou inválido
  schemas:
    Area:
      required:
        - nome
        - descricao
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        nome:
          type: string
          example: Salão de festas
        descricao:
          type: string
          example: Salão de festas do BragaClube
      xml:
        name: area
    Socio:
      type: object
      xml:
        name: socio
      properties:
        id:
          type: integer
          format: int64
          example: 14
        nome:
          type: string
          example: Bruno Borelli
        cpf:
          type: string
          example: 321.321.321-32
          pattern: '(^\d{3}\x2E\d{3}\x2E\d{3}\x2D\d{2}$)'
      required:
        - nome
        - cpf
    Reserva:
      required:
        - socioID
        - areaID
        - datahoraEntrada
        - datahoraSaida
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 16
        socioID:
          type: integer
          format: int64
          example: 14
        areaID:
          type: integer
          format: int64
          example: 10
        datahoraEntrada:
          type: string
          format: date-time
          example: '2022-09-17T18:00:00.000Z'
        datahoraSaida:
          type: string
          format: date-time
          example: '2022-09-17T20:00:00.000Z'
      xml:
        name: socio
    Administrador:
      required:
        - nome
        - cargo
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 25
        cargo:
          type: string
          example: Atendente
        nome:
          type: string
          example: Karen
      xml:
        name: administrador
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
x-internal: false
